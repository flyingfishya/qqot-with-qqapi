首先在使用之前使用python3/python检查python环境使用对应pip3 install/pip insatll进行安装对应的包
一般情况下ubuntu环境只要安装以下几个包
pip3 install requests
pip3 install qq-botpy
注意：官方的qq-botpy可能需要python 3.7+
接下来你需要去qq开放平台注册一个自己的qq机器人这时候你可以获得机器人的身份证诸如：机器人qq号，机器人id，机器人的令牌token，密钥等
接下来按照以下代码的说明来替换你就可以初步实现qq机器人接入文心一言
# -*- coding: utf-8 -*-
import os

import requests
import json

import botpy
from botpy import logging

from botpy.message import DirectMessage, Message
from botpy.ext.cog_yaml import read

test_config = read(os.path.join(os.path.dirname(__file__), "config.yaml"))

_log = logging.get_logger()

wenxin_ask = "123"

def get_access_token():
    """
    使用 API Key，Secret Key 获取access_token，替换下列示例中的应用API Key、应用Secret Key
    """

    url = "https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&client_id=[your API Key 记得去掉括号]&client_secret=[yor Secret Key]"     //获取文心一言的access_token

    payload = json.dumps("")
    headers = {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
    }

    response = requests.request("POST", url, headers=headers, data=payload)
    return response.json().get("access_token")


def wenxin_main(abc = "123"):
    global wenxin_ask
    url = "https://aip.baidubce.com/rpc/2.0/ai_custom/v1/wenxinworkshop/chat/completions?access_token=" + get_access_token()    //与文心一言沟通

    payload = json.dumps({
        "messages": [
            {
                "role": "user",
                "content": abc
            }
        ]
    })
    headers = {
        'Content-Type': 'application/json'
    }

    response = requests.request("POST", url, headers=headers, data=payload)
    #print(response.text)
    #print(response.text[response.text.find("result") + 8:response.text.find("is_truncated") - 2])
    wenxin_ask = response.text[response.text.find("result") + 8:response.text.find("is_truncated") - 2]   //处理得到的字符串提取出回答内容

def pangduan(abc = "123"):            //这个函数用于分流，判断是否需要使用文心一言来回答或者使用固定答案
    global wenxin_ask

    if abc == "你是谁":
        wenxin_ask = "我是雨墨鸭"
    elif abc == "你是谁？":
        wenxin_ask = "雨墨"
    elif abc == "你是谁?":
        wenxin_ask = "雨墨"
    elif abc == "你是":
        wenxin_ask = "雨墨"
    elif abc == "你是？":
        wenxin_ask = "雨墨"
    elif abc == "你是?":
        wenxin_ask = "雨墨"
    elif abc == "你觉得大黄怎么说":
        wenxin_ask = "是沙雕"
    elif abc == "你觉得大黄怎么说?":
        wenxin_ask = "是沙雕"
    elif abc == "你觉得大黄怎么说？":
        wenxin_ask = "是沙雕"
    else:
        wenxin_main(abc)

class MyClient(botpy.Client):  //和qq  api沟通的进程

    global wenxin_ask

    #main()
    async def on_ready(self):
        _log.info(f"robot 「{self.robot.name}」 on_ready!")

    async def on_direct_message_create(self, message: DirectMessage):  //这里开始获取和处理消息
        pangduan(message.content)
        #wenxin_main(message.content)
        #print(message.content)
        await self.api.post_dms(
            guild_id=message.guild_id,
            #content=f"{self.robot.name}知道你说{message.content}了",
            content=f"{self.robot.name}:"+wenxin_ask, //content存放的内容是你之后输出到界面上（回答）的内容，message.content是收到的内容。
            msg_id=message.id,
        )

    async def on_at_message_create(self, message: Message):
        if "/私信" in message.content:
            dms_payload = await self.api.create_dms(message.guild_id, message.author.id)
            _log.info("发送私信")
            await self.api.post_dms(dms_payload["guild_id"], content="hello", msg_id=message.id)


if __name__ == "__main__":
    # 通过预设置的类型，设置需要监听的事件通道
    # intents = botpy.Intents.none()
    # intents.public_guild_messages=True

    # 通过kwargs，设置需要监听的事件通道
    intents = botpy.Intents(direct_message=True, public_guild_messages=True)
    client = MyClient(intents=intents)
    client.run(appid=test_config["appid"], secret=test_config["secret"])
